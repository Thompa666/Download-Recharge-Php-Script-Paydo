<?php eval("?>".base64_decode("<?php 
     
     require_once '../config/config.php';
	//  require_once 'create.php';
require_once '../theme/header.php'; 


session_start();

if(!isset($_SESSION['username']) || empty($_SESSION['username'])){
  header("location: index.php");
  exit;
}  
?>
<!-- body -->
<body >

<!--header-->


<!--//-->	
	<div class=" header-right">
		<div class="banner">
			 <div class="slider">
			    <div class="callbacks_container">
			      <ul class="rslides" id="slider">		       
					 <li>
			          	 <div class="banner1">
			           		<div class="caption">
					          	<h3><span>Get a</span> coupon voucher on Mobile Recharge</h3>
					          	<p><a href="#mobilew3layouts" class="scroll">Recharge now</a></p>
			          		</div>
			          	</div>
			         </li>
					 <li>
			          	 <div class="banner2">
			           		<div class="caption">
					          	<h3><span>50% off</span> on train Tickets</h3>
                                <p><a href="train.html">Book now</a></p>
			          		</div>
			          	</div>
			         </li>
			         <li>
			          	 <div class="banner3">
			           		<div class="caption">
					          	<h3><span>Flat Rs.200 Cash back</span>  on Movie Tickets</h3>
					          	<p><a href="movies.html">Book now</a></p>
			          		</div>
			          	</div>
			         </li>	
                      <li>
			          	 <div class="banner4">
			           		<div class="caption">
					          	<h3><span>Upto Rs.125 Discount </span> & Flat 100% Money Back</h3>
					          	<p><a href="bus.html">Book now</a></p>
			          		</div>
			          	</div>
			         </li>	
			      </ul>
			  </div>
			</div>
		</div>
	</div>
	

    <!--Vertical Tab-->
	<div class="categories-section main-grid-border" id="mobilew3layouts">
	  <div class="container">

			<div class="category-list">
				<div id="parentVerticalTab">
				   
					<div class="agileits-tab_nav">
					<ul class="resp-tabs-list hor_1">
						<li><i class="icon fa fa-mobile" aria-hidden="true" ></i>Account Setting</li>						
						<li><i class="icon fa fa-television" aria-hidden="true"></i>View Balance</li>
						<li><i class="icon fa fa-lightbulb-o" aria-hidden="true"></i>All Distributor List</li>
						<li><i class="icon fa fa-credit-card" aria-hidden="true"></i>All Agent List</li>
						<li><i class="icon fa fa-phone" aria-hidden="true"></i>All Trial Agent List</li>
						<li><i class="icon fa fa-tasks" aria-hidden="true" ></i>Push Balance</li>
						<li><i class="icon fa fa-tasks" aria-hidden="true" ></i>Create Account</li>
												
					</ul>
					</div>
					<div class="resp-tabs-container hor_1">
                        <!-- tab1 -->
						<div>
                            <div class="tabs-box">
                                
                   
			     <div class="clearfix"> </div>
			     <div class="tab-grids">
                    <div id="tab1" class="tab-grid">  
		                      <div class="login-form">
		                        <h3>Set API Authentication(GET API from paywish.in)</h3><br/>	
                                            <form action="admin_update.php" id="form" method="post">


                                              <label>Recharge API(<a href="http://paywish.in/developers-api.html">Get API from paywish.in</a>)</label>
                                              <input type="text" class="form-control" name="rech_api" placeholder="enter api key"><br/>  
                                            
                                              <label>SMS KEY (SMS only support 2.1)(<a href="http://paywish.in/developers-api.html">Get API from paywish.in</a>)</label>
                                              <input type="text" class="form-control" name="auth_key" placeholder="Sorry, Support 2.1 version"><br/>


                                              <label>PAYMENT KEY(<a href="http://paywish.in/developers-api.html">Get API from paywish.in</a>)</label>
                                              <input type="text" class="form-control" name="pay_key" placeholder="enter payment authentication key"><br/>


                                              
                                              <label>About Us Page Setting</label><br/>
                                              <textarea rows="4" cols="50" name="about_us" class="form-control"> 
                                              </textarea><br/>
                                              
                                              <label>Contact Us Page Setting</label><br/>
                                              <textarea rows="4" cols="50" name="contact_us" class="form-control"> 
                                              </textarea><br/>
                                              
                                              <label>Banner Text (1)</label>
                                              <input type="text" class="form-control" name="banner" placeholder="enter banner name"/><br/>
                                            
                                              <label>Banner Text (2)</label>
                                              <input type="text" class="form-control" name="banner2" placeholder="enter banner name"/><br/>
                                     
                                              <label>Banner Text(3)</label>
                                              <input type="text" class="form-control" name="banner3" placeholder="enter banner name"/><br/>
                                                                                         
                                              <input type="submit" class="submit" name="submit" value="set"/>
                                            </form>
																							
						</div>	

                    </div>
                    <div id="tab2" class="tab-grid">
		                      <div class="login-form">

																							
						</div>	
                    </div>
				</div>
			
			<div class="clearfix"> </div>
		</div>
	<!-- script -->
		<script>
			$(document).ready(function() {
				$("#tab2").hide();
				$("#tab3").hide();
				$("#tab4").hide();
				$(".tabs-menu a").click(function(event){
					event.preventDefault();
					var tab=$(this).attr("href");
					$(".tab-grid").not(tab).css("display","none");
					$(tab).fadeIn("slow");
				});
			});
		</script>
                            
							
                            
            
                    
			             </div>
                        <!-- /tab1 -->
			<!-- tab2 -->
						<div>
							
		                      <div class="login-form">
                                 <!--<i class="icon fa fa-television inner-icon" aria-hidden="true"></i>-->
                               <?php 
							 include_once("dis.php");
							 include_once("agent.php");
							 include_once("api.php");
							 include_once("api1.php");
							 $toli=$qty+$bal;
							   echo "<p id='p' style='color:#FF00FF'>Your Distributor Balance: ".$bal." /-</p><br/><br/>";
							   echo "<p id='p' style='color:#FF00FF'>Your Agent Balance: ".$qty." /-</p><br/><br/>";
echo "<p id='p' style='color:#FF00FF'>Total Users Balance: ".$toli." /-</p><br/><br/>";
							   echo "<p id='p' style='color:#FF00FF'>Current API Balnce of ".$username." is Rs ".$balance." /-</p><br/><br/>";
							   echo "<p id='p' style='color:#FF00FF'>Current API Balnce of ".$username." is Rs ".$balance1." /-</p>";						  
							   ?>
																							
						</div>	
						</div>
                        <!-- /tab2 -->
                        
                        <!-- tab3 -->

                        <!-- /tab3 -->
                        
                        
                        <!-- tab4 -->
                        <div>
                            <i class="icon fa fa-lightbulb-o inner-icon" aria-hidden="true"></i>
                    <div id="tab2" class="tab-grid">
		                      <div class="login-form">
							  <?php
require_once ('link.php');
	$result="select * from dis_users";
	$query=mysqli_query($link,$result);
	$rows=mysqli_num_rows($query);
  
  if($rows > 0){

   ?>  
  
    <table class="table table-hover table-bordered" border="4">
	<thead id="th">
     <tr>
	 <th>Distributor Name</th>
	 <th>User Name</th>
	 <th>Package</th>
	 <th>Email</th>
	 <th>Date Of Birth</th>
	 <th>Commission(%)</th>
	 </tr>
    </thead>
	 <?php
      while($result=mysqli_fetch_array($query))
	  {
     ?>
	<tbody>
	    <tr>
		<td><?php echo $result ["Name"];?></td>
		<td><?php echo $result ["dis_username"];?></td>
		<td><?php echo $result ["package"];?></td>
		<td><?php echo $result ["email"];?></td>
		<td><?php echo $result ["dob"];?></td>
		<td><?php echo $result ["set_comm"];?></td>
		</tr>
	</tbody>
 	
    <?php 
	  }  
	  ?>
	 </table>
<?php	  
    }
 ?>														
						</div>	
						</div>
                        </div>
                        <!-- /tab4 -->
                        
                        
                        <!-- tab5 -->
						<div>
                            
							
                    <div id="tab2" class="tab-grid">
		                      <div class="login-form">
<?php
require_once ('link.php');
$limit = 10;  
if (isset($_GET["page"])) { $page  = $_GET["page"]; } else { $page=1; };  
$start_from = ($page-1) * $limit; 


	$result="select * from users ORDER BY id DESC LIMIT $start_from, $limit";
	$query=mysqli_query($link,$result);
	$rows=mysqli_num_rows($query);
  
  if($rows > 0)
  {
  ?>  
  
    <table class="table table-hover table-bordered">
	<thead id="th">
     <tr>
	 <th>Agent Name</th>
	 <th>User Name</th>
	 <th>Package</th>
	 <th>Email</th>
	 <th>Date Of Birth</th>
	 <th>Commission(%)</th>
 <th>Balance</th>

	 </tr>
    </thead>
	 <?php
      while($result=mysqli_fetch_array($query))
	  {
     ?>
	<tbody>
	    <tr>
		<td><?php echo $result ["Name"];?></td>
		<td><?php echo $result ["username"];?></td>
		<td><?php echo $result ["package"];?></td>
		<td><?php echo $result ["email"];?></td>
		<td><?php echo $result ["dob"];?></td>
		<td><?php echo $result ["set_comm"];?></td>
<td><?php echo $result ["balance"];?></td>
		</tr>
	</tbody>
 	
    <?php 
	  }  
	  ?>
	 </table>
<?php	  
    }
 ?>
<?php  
$sql = "SELECT COUNT(id) FROM users";  
$rs_result = mysqli_query($link,$sql);  
$row = mysqli_fetch_row($rs_result);  
$total_records = $row[0];  
$total_pages = ceil($total_records / $limit);  
$pagLink = "<div class='pagination'>";  
for ($i=1; $i<=$total_pages; $i++) {  
             $pagLink .= "<a href='admin.php?page=".$i."#parentVerticalTab4' class=btn btn-primary btn-xs'>".$i."</a>";  
};  
echo $pagLink . "</div>";

?>														
						</div>	
						</div>
							
						</div>
                        <!-- /tab5 -->
                        <!-- tab6 -->
						<div>
                            
							<i class="icon fa fa-phone inner-icon" aria-hidden="true"></i>
                    <div id="tab2" class="tab-grid">
		                      <div class="login-form">
<?php
require_once ('link.php');

	$result="select * from trial_users";
	$query=mysqli_query($link,$result);
	$rows=mysqli_num_rows($query);
  
  if($rows > 0){
    
   ?>  
  
    <table class="table table-hover table-bordered">
	<thead id="th">
     <tr>
	 <th>Agent Name</th>
	 <th>User Name</th>
	 <th>Package</th>
	 <th>Email</th>
	 <th>Date Of Birth</th>
	 <th>Commission(%)</th>
	 </tr>
    </thead>
	 <?php
      while($result=mysqli_fetch_array($query))
	  {
	  //$username=$result["username"];
     ?>
	<tbody>
	    <tr>
		<td><?php echo $result ["Name"];?></td>
		<td><?php echo $result ["username"];?></td>
		<td><?php echo $result ["package"];?></td>
		<td><?php echo $result ["email"];?></td>
		<td><?php echo $result ["dob"];?></td>
		<td><?php echo $result ["set_comm"];?></td>
		<td>
		<form action="update.php" method="post">
		<input type="hidden" name="username" value="<?php echo $result["username"]; ?>" >
		<input type="submit" class="submit" name="flag" value="activate">
		</form>
		</td>
		</tr>
	</tbody>
 	
    <?php
	  }  
	  ?>
	 </table>
<?php	  
    }
 ?>														
						</div>	
						</div>
							
						</div>
                        <!-- /tab6 -->
                        
                        <!-- tab7 -->
                
                        <!-- /tab7 -->
						<div>
							
							<i class="icon fa fa-flask inner-icon" aria-hidden="true"></i><br/><br/>
                    <div id="tab2" class="tab-grid">
		                      <div class="login-form">
						<form action="pay.html" method="post" id="signup">
						<ol>	
                            <li>
                                  <a href="transfer.php" class="btn btn-success">Transfer to Agent</a><br/><br/>
                               <a href="transfer_dist.php" class="btn btn-success">Transfer to Distributor</a><br/><br/>
                            </li>
                           
				        </ol>
						</form>	
																							
						</div>	
						</div>
						</div>
                        <!-- /tab7 -->
                        
                        <!-- tab8 -->
						<div>
							<i class="icon fa fa-tint inner-icon" aria-hidden="true"></i><br/><br/>
                    <div id="tab2" class="tab-grid">
		                      <div class="login-form">
						<form action="pay.html" method="post" id="signup">
						<ol>	
                         
                               <a href="create_agent.php" class="btn btn-success">Create Agent</a><br/><br/>
                               <a href="create_dist.php" class="btn btn-success">Create Distributor</a>
                            </li>
				        </ol>
						</form>	
																							
						</div>	
						</div>
						</div>
                        <!-- /tab8 -->
                        
                        <!-- tab9 -->
						<div>
							<i class="icon fa fa-subway inner-icon" aria-hidden="true"></i>
                    <div id="tab2" class="tab-grid">
		                      <div class="login-form">
			<!-- yo yo -->

																							
						</div>	
						</div>
						</div>
                   
					</div>
				

<div class="clearfix"></div>
				</div>
			</div>
		</div>
	</div>
	<!--Plug-in Initialisation-->
	<script type="text/javascript">
    $(document).ready(function() {

        //Vertical Tab
        $('#parentVerticalTab').easyResponsiveTabs({
            type: 'vertical', //Types: default, vertical, accordion
            width: 'auto', //auto or any width like 600px
            fit: true, // 100% fit in a container
            closed: 'accordion', // Start closed if in accordion view
            tabidentify: 'hor_1', // The tab groups identifier
            activate: function(event) { // Callback function if tab is switched
                var $tab = $(this);
                var $info = $('#nested-tabInfo2');
                var $name = $('span', $info);
                $name.text($tab.text());
                $info.show();
            }
        });
    });
</script>
	<!-- //Categories -->
	
<div class="w3layouts-partners">

		<div class="container">
		
				
				<h3>24/7 Customer Service Support</h3><br/>
				<h3>Call +91-8759759506 <br/> email support@paydo.in</h3>

</div>		</div>
			


 
 
    
<!-- subscribe -->
	<div class="w3-subscribe agileits-w3layouts"> 
		<div class="container">
			<div class="col-md-6 social-icons w3-agile-icons">
				<h4>Join Us</h4>  
				<ul>
					<li><a href="https:/facebook.com/Paydoin-Online-Recharge-Business-2066554576896410" class="fa fa-facebook sicon facebook"> </a></li>
<li><a href="https://plus.google.com/b/107299483429956233724/107299483429956233724" class="fa fa-google-plus sicon googleplus"> </a></li>
				
				</ul> <br/>

<ul>
<li><img src="https://paydo.in/iso.jpg" width="100" heigth="80"> </li>
<li><img src="https://paydo.in/inst.jpg" width="100" heigth="80"></li>
				</ul>


			</div> 


			<div class="col-md-6 w3-agile-subscribe-right">
				<h3 class="w3ls-title">Subscribe to Our <br><span>Newsletter</span></h3>  
				<form action="#" method="post"> 
					<input type="email" name="email" placeholder="Enter your Email..." required="">
					<input type="submit" value="Subscribe">
					<div class="clearfix"> </div> 
				</form>  
			</div>
			<div class="clearfix"> </div> 
		</div>
	</div>
<!-- //subscribe --> 
    
<!--footer-->
<footer>
	<div class="container-fluid">
		<div class="w3-agile-footer-top-at">
			<div class="col-md-2 agileits-amet-sed">
				<h4>Company</h4>
				<ul class="w3ls-nav-bottom">
					<?php


if(!isset($_SESSION['mobile']) || empty($_SESSION['mobile'])){ 
?>
<li><a href="index.php">Home</a></li>

                      


<?php }else{ ?>


		
                     <li><a href="welcome.php">Home</a></li>
<?php } ?>    	     


					
					<li><a href="about.php">About Us</a></li>
					<li><a href="services.php">Services</a></li>
					<li><a href="terms.php">Terms & Conditions</a></li>
                                        <li><a href="policy.php">Privacy Policy</a></li>
					<li><a href="faq.php">Faq</a></li>
	                                <li><a href="refundpolicy.php">Refund Policy</a></li>
					<li><a href="contact.php">Contact Us</a></li>
					
				</ul>	
			</div>
			<div class="col-md-3 agileits-amet-sed ">
				<h4>Mobile Recharges</h4>
					<ul class="w3ls-nav-bottom">
						<li><a href="#mobilew3layouts" class="scroll">Airtel</a></li>
						<li><a href="#mobilew3layouts" class="scroll">Aircel</a></li>
						<li><a href="#mobilew3layouts" class="scroll">Vodafone</a></li>
						<li><a href="#mobilew3layouts" class="scroll">BSNL</a></li>
						<li><a href="#mobilew3layouts" class="scroll">Tata Docomo</a></li>
						<li><a href="#mobilew3layouts" class="scroll">Reliance GSM</a></li>	
						<li><a href="#mobilew3layouts" class="scroll">Reliance CDMA</a></li>	
						<li><a href="#mobilew3layouts" class="scroll">Telenor</a></li>	
						<li><a href="#mobilew3layouts" class="scroll">MTS</a></li>	
						<li><a href="#mobilew3layouts" class="scroll">Jio</a></li>	
					</ul>	
			</div>
			<div class="col-md-3 agileits-amet-sed ">
				<h4>DATACARD RECHARGES</h4>
				   <ul class="w3ls-nav-bottom">
						<li><a href="#mobilew3layouts" class="scroll">Tata Photon</a></li>
						<li><a href="#mobilew3layouts" class="scroll">MTS MBlaze</a></li>
						<li><a href="#mobilew3layouts" class="scroll">MTS MBrowse</a></li>
						<li><a href="#mobilew3layouts" class="scroll">Airtel</a></li>
						<li><a href="#mobilew3layouts" class="scroll">Aircel</a></li>
						<li><a href="#mobilew3layouts" class="scroll">BSNL</a></li>	
						<li><a href="#mobilew3layouts" class="scroll">MTNL Delhi</a></li>	
						<li><a href="#mobilew3layouts" class="scroll">Vodafone</a></li>	
						<li><a href="#mobilew3layouts" class="scroll">Idea</a></li>	
						<li><a href="#mobilew3layouts" class="scroll">MTNL Mumbai</a></li>
						<li><a href="#mobilew3layouts" class="scroll">Tata Photon Whiz</a></li>	
					</ul>	
			</div>
			<div class="col-md-2 agileits-amet-sed">
				<h4>DTH Recharges</h4>
				<ul class="w3ls-nav-bottom">
						<li><a href="#mobilew3layouts" class="scroll"> Airtel Digital TV Recharges</a></li>
						<li><a href="#mobilew3layouts" class="scroll">Dish TV Recharges</a></li>
						<li><a href="#mobilew3layouts" class="scroll">Tata Sky Recharges</a></li>
						<li><a href="#mobilew3layouts" class="scroll">Reliance Digital TV Recharges</a></li>
						<li><a href="#mobilew3layouts" class="scroll">Sun Direct Recharges</a></li>
						<li><a href="#mobilew3layouts" class="scroll">Videocon D2H Recharges</a></li>	
					</ul>	
			</div>
            <div class="col-md-2 agileits-amet-sed ">
				<h4>Payment Options</h4>
				   <ul class="w3ls-nav-bottom">
						<li>Credit Cards</li>
						<li>Debit Cards</li>
						<li>Any Visa Debit Card (VBV)</li>
						<li>Direct Bank Debits</li>
						<li>Cash Cards</li>	
					</ul>	
			</div>
		<div class="clearfix"> </div>
		</div>
    </div>
	<div class="w3l-footer-bottom">
		<div class="container-fluid">
			<div class="col-md-4 w3-footer-logo">
			<h2><a href="index.html">PayDo.In</a></h2>
			</div>
			<div class="col-md-8 agileits-footer-class">		
			</div>
		<div class="clearfix"> </div>
	 	</div>
	</div>
</footer>

<!--//footer-->
    
<!-- for bootstrap working -->
		<script src="theme/js/bootstrap.js"></script>
<!-- //for bootstrap working --><!-- Responsive-slider -->
    <!-- Banner-slider -->
<script src="theme/js/responsiveslides.min.js"></script>
<script>
    $(function () {
      $("#slider").responsiveSlides({
      	auto: true,
      	speed: 500,
        namespace: "callbacks",
        pager: true,
      });
    });
</script>

    <!-- //Banner-slider -->
<!-- //Responsive-slider -->   
<!-- Bootstrap select option script -->
<script src="theme/js/bootstrap-select.js"></script>
<script>
  $(document).ready(function () {
    var mySelect = $('#first-disabled2');

    $('#special').on('click', function () {
      mySelect.find('option:selected').prop('disabled', true);
      mySelect.selectpicker('refresh');
    });

    $('#special2').on('click', function () {
      mySelect.find('option:disabled').prop('disabled', false);
      mySelect.selectpicker('refresh');
    });

    $('#basic2').selectpicker({
      liveSearch: true,
      maxOptions: 1
    });
  });
</script>
<!-- //Bootstrap select option script -->
    

		<!-- //here ends scrolling icon -->
</body>
<!-- //body -->
</body>
<!-- //body -->
</html>
<!-- //html -->
</html>
<!-- //html -->
	
")); ?>